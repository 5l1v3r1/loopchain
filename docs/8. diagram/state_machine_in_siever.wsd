@startuml State Machine in Siever
hide empty description

[*] --> Initialize
state Initialize {
    state InitComponents: Initialize Node
    state Consensus: X
    state BlockHeightSync: X

    [*] --> InitComponents
    InitComponents -> Consensus
    Consensus -> BlockHeightSync
    BlockHeightSync --> [*]
    Initialize --> EvaluateNetwork
}


state Ready {
    state ResetNetwork: Clear peer targets
    state EvaluateNetwork {
        EvaluateNetwork: Select node type
        EvaluateNetwork: Initialize peer targets
    }
    state BlockSync: Sync Blocks if needed
    state SubscribeNetwork {
        SubscribeNetwork: Select node type again
        SubscribeNetwork: (Citizen: Subscribe to parent)
    }

    EvaluateNetwork --> BlockSync
    ResetNetwork -> EvaluateNetwork
    BlockSync --> SubscribeNetwork
    SubscribeNetwork -> BlockSync
    BlockSync -> ResetNetwork

    SubscribeNetwork --> [*]: complete_subscribe
    Ready --> Online: complete_subscribe
}

state Online {
    state fork_state <<fork>>
    state join_state <<join>>
    state Watch: Citizen
    state Vote: Validator
    state BlockGenerate: Leader
    state LeaderComplain: Leader fails

    [*] --> fork_state: Check node type then transit
    fork_state --> Watch
    fork_state --> Vote
    fork_state --> BlockGenerate

    BlockGenerate -> Vote
    Vote -> BlockGenerate
    Vote -> LeaderComplain
    LeaderComplain -> Vote
    LeaderComplain -> BlockGenerate

    Watch --> join_state
    Vote --> join_state
    BlockGenerate --> join_state
    LeaderComplain --> join_state
    join_state --> [*]: Switch Role \nOR \nHeight is falling behind

    Online --> ResetNetwork: Switch Role
    Online --> BlockSync: Height is falling behind
}
@enduml